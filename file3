#ifndef SERVER_HPP
#define SERVER_HPP

// #include "ConfigBuilder.hpp"
#include "ServerConf.hpp"
#include "Client.hpp"
#include <vector>
#include <map>
#include <poll.h>

class Server {
private:
    // Config &_config;
    std::vector<ServerConf>& _config;
    std::vector<int> _serverSockets;
    std::vector<struct pollfd> _pollFds;
    std::map<int, Client*> _clients;
    
    // Setup
    void setupServerSockets();
    int createServerSocket(int port);
    void setNonBlocking(int fd);
    
    // Poll management
    void addToPoll(int fd, short events);
    void removeFromPoll(int fd);
    int findPollfdIndex(int fd) const;
    void updatePollEvents(int fd, short events);
    
    // Connection handling
    void handleNewConnection(int serverFd);
    void handleClientRead(int clientFd);
    void handleClientWrite(int clientFd);
    void closeClient(int clientFd);
    
    // Utils
    bool isServerSocket(int fd) const;
    
public:
    Server(std::vector<ServerConf>& config);
    ~Server();
    
    void runOnce();
    
private:
    // Non-copyable
    Server(const Server &);
    Server &operator=(const Server &);
};

#endif